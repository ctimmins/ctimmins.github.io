
$(document).ready(function() {
    $.ajaxSetup({ cache: false });
    var container =  $('#container'),
        controllerDiv =  $('#controllers'),
        existing_controllers = $('#existing_controllers'),
        add_controller_button = $('#add_controller'),
        new_root_id = $('#newRootID'),
        new_root_name = $('#newRootName'),
        areasDiv =  $('#areas'),
        existingAreas = $('#existing_areas'),
		newAreas = $('#new_areas'),
        controllerInfo = $('#controller_info'),
        titlebox = $('#title'),
        handler = 'http://54.186.1.107/manager.php',
		currentMoistureList = [];
		
		$('#signinbutton').click(function()
		{
			login();
		});
    
    //getControllers(Username);
    
    function login()
    {
		var email,pass;
		email = $('#email').val();
		pass = $('#pass').val();
		console.log(email);
		console.log(pass);
		//Don't really do anything for now
		getControllers(email);
	}
    
    function getControllers(Username)
    {
        controllerDiv.show();
        controllerDiv.siblings().hide();
        $.getJSON(handler,{Username: Username, Mode: 'GetControllers'}, function(returnVal)
        {
            existing_controllers.empty();
            if(returnVal.length === 0)
                existing_controllers.append("<div class='row'><h2>add a rooT to start a garden!</h2></div>");
            $.each(returnVal, function(key,val)
            {
				existing_controllers.append($("<div class='col-xs-6 col-sm-3 placeholder'><div class='AreaBox h3'>"+val.Name+"</div></div>")).data('ID',val.ID).data('Name',val.Name)
                .click(function()
                {
                    getControllerDetails($(this).data('ID'),$(this).data('Name'));
                })  
            });
            $('#add_controller').click(function()
            {
                addController(Username)
            });
            
        });
    }
    
    
    function addController(Username)
    {
        $.getJSON(handler,{Username: Username, ControllerID: safeID(new_root_id.val()), ControllerName:  new_root_name.val(), Mode: 'AddController'}, function(returnVal)
        {
            getControllers(Username);
        });
    }
    
    function deleteController(Username,ControllerID)
    {
        $.getJSON(handler,{Username: Username, ControllerID: ControllerID, Mode: 'DeleteController'}, function(returnVal)
        {
            getControllers(Username);
        });
    }
    
    //Function to pull the details about a Controller's Areas
    function getControllerDetails(ControllerID,Name)
    {
        controllerInfo.empty();
        existingAreas.empty();
        
        //Set Title Info
        titlebox.empty().append(Name);
        
        //reset current moisture list
        currentMoistureList = {};
        
        //clear screen
        areasDiv.show();
        areasDiv.siblings().hide();
		newAreas.show();
        
		//Get current area infromation
		$.getJSON(handler,{ControllerID: ControllerID, Mode: 'GetControllerAreaData'}, function(returnVal)
		{
			$.each(returnVal, function(key,area)
			{
			   existingAreas.append($("<div class='col-xs-6 col-sm-3 placeholder'><div class='AreaBox h3'>"+area.Area_Name+"</div></div>").data("area",area).data("ControllerID",ControllerID).click(function(event){
				   getAreaDetails($(this).data("area"),$(this).data("ControllerID"));
			   }));
			});
		});
    }
    
    function getAreaDetails(area,ControllerID)
    {
        var areaCont = $('<div class="row" id="'+safeID(area.Area_Name)+'"></div>'),
			override = $('<div class="row h4" style="background-color:#E96969;padding:10px"><div class="col-md-4 col-md-offset-1 col-xs-6 col-xs-offset-0"><input type="checkbox" name="'+area.Area_Name+'" id="override_check'+safeID(area.Area_Name)+'"/> Override</div><div id="override'+safeID(area.Area_Name)+'" class="col-md-4 col-md-offset-1 col-xs-6 col-xs-offset-0"></div></div>'),
			modeHolder = $('<div class="row" id="mode'+safeID(area.Area_Name)+'"><div class="col-md-6"><button type="button" class="btn btn-default btn-lg btn-block active" id="RealTime">Real Time</button></div><div class="col-md-6"><button type="button" class="btn btn-default btn-lg btn-block" id="Historical">Historical</button></div></div>'),
			timeHolder = $('<div class="row h2" id="time'+safeID(area.Area_Name)+'"><div class="col-md-4 col-md-offset-2 col-xs-8 col-xs-offset-2">From: <input type="text" class="time-box" id="startTime" readonly="true"></input></div><div class="col-md-4 col-md-offset-0 col-xs-8 col-xs-offset-2">To: <input type="text" class="time-box" id="endTime" readonly="true"></input></div></div><div class="row"><div class="col-md-6 col-md-offset-3 col-xs-8 col-xs-offset-2"><button id="go" class="btn btn-primary btn-lg btn-block">Go</button></div></div>'),
            statsHolder = $('<div class="row" id="stats'+safeID(area.Area_Name)+'"></div>'),
            graphHolder = $('<div class="row" id="graph'+safeID(area.Area_Name)+'"></div>'),
			now = new Date(), prev = new Date(), realTime = true;
    
        existingAreas.empty().append(areaCont);
		newAreas.hide();
		areaCont.append(override);
		areaCont.append(modeHolder);
        areaCont.append(timeHolder);
        areaCont.append(statsHolder);
        areaCont.append(graphHolder);
		
		graphHolder.empty().append('<svg style="height:500px"> </svg>');
		
		//get historical area information
		$('#go').click(function(){
			var startTime =  new Date($('#startTime').val()),
				endTime = new Date($('#endTime').val()),
				graphValues = [];
			$.getJSON(handler,{ControllerID: ControllerID, Area: area.Area_Name, StartTime: startTime.getTime()/1000.0, EndTime: endTime.getTime()/1000.0 ,Mode: 'GetHistoricalAreaData'}, function(returnVal)
			{				
				//Create the graph with the values
				currentMoistureList = {};
				
				$.each(returnVal, function(key,value)
				{
					var time = parseInt(value.Time)*1000;
					$.each(value.Areas['0'].Nodes, function(key,value)
					{
						if(typeof currentMoistureList[key] === 'undefined')
						{
							currentMoistureList[key] = [];
						}
						currentMoistureList[key].push({x:time,y:value.Current_Value/100});
					});
				});
				
				//Push different lines onto chart (i.e moisture, PH, Nitro)
				$.each(currentMoistureList, function(key,value)
				{
					graphValues.push({key:key,values:value});
				});
				graphHolder.empty().append('<svg style="height:500px"> </svg>');
				histChart(JSON.parse(JSON.stringify(graphValues)),'#graph'+safeID(area.Area_Name)+' svg');
			});
        });		
		
		//Mode Click functions
		$('#Historical').click(function(){
			realTime = false;
			$('#Historical').addClass( "active" );
			$('#RealTime').removeClass( "active" );
			
			//show times
			timeHolder.show();
			//create graph
			$('#go').click();
		});
		
		$('#RealTime').click(function(){
			realTime = true;
			$('#Historical').removeClass( "active" );
			$('#RealTime').addClass( "active" );
			
			//hide time
			timeHolder.hide();
			
			//set dates
			prev.setHours(now.getHours()-5);
			$('#startTime').datetimepicker({value:prev.getFullYear()+'/'+String('00'+(prev.getMonth()+1)).slice(-2)+'/'+String('00'+prev.getDate()).slice(-2)+' '+String('00'+prev.getHours()).slice(-2)+':'+String('00'+prev.getMinutes()).slice(-2)});
			$('#endTime').datetimepicker({value:now.getFullYear()+'/'+String('00'+(now.getMonth()+1)).slice(-2)+'/'+String('00'+now.getDate()).slice(-2)+' '+String('00'+now.getHours()).slice(-2)+':'+String('00'+now.getMinutes()).slice(-2)});
			
			//create graph
			//$('#go').click();
		});
		
		//real time updates
		setInterval(function(){
			if(realTime)
			{
				getLatestData(area);
			}
		},3000);
		
		//get latest data point
		function getLatestData(area)
		{
			var graphValues = [], results, curtime = new Date();
			$.getJSON(handler,{ControllerID: ControllerID, Area: area.Area_Name, Mode: 'GetLatestAreaData'}, function(returnVal){
				statsHolder.empty();
				moistureHolder = $('<div class="h3">');
				moistureHolder.append('<div class="col-md-3 col-md-offset-1 col-xs-9 col-xs-offset-3"> Current Moisture: ' + returnVal.Areas[0].Current_Moisture.toFixed(2) +'%</div>' );
				moistureHolder.append('<div class="col-md-3 col-md-offset-1 col-xs-9 col-xs-offset-3">Average Moisture: ' + returnVal.Areas[0].Moving_Average_Moisture.toFixed(2) +'%</div>' );
				moistureHolder.append('<div class="col-md-3 col-md-offset-1 col-xs-9 col-xs-offset-3">Actuator Status: ' + returnVal.Areas[0].Area_Actuator_Status + '</div>');
				statsHolder.append(moistureHolder);
				
				var time = parseInt(returnVal.Time)*1000;
				var i= -1;
				$.each(returnVal.Areas[0].Nodes, function(key,value)
				{
					i = i + 1;
					if(typeof currentMoistureList[key] === 'undefined')
					{
						currentMoistureList[key] = [];
					}
					
					//push latest data onto stack
					if(currentMoistureList[key].length > 40)
						currentMoistureList[key].pop();
					
					results = $.grep(currentMoistureList[key], function (val) {
						return val.x == parseInt(returnVal.Time)*1000;
					})
					
					if(results.length == 0)
						currentMoistureList[key].unshift({x:time,y:(value.Current_Value+i)/100});
				});
				
				//Push different lines onto chart (i.e moisture, PH, Nitro)
				//$.each(currentMoistureList, function(key,value)
				//{
					graphValues.push({key:'01',values:currentMoistureList['01']});
					graphValues.push({key:'02',values:currentMoistureList['02']});
				//});
				
				//generate graph
				console.log(JSON.stringify(graphValues));
				histChart(JSON.parse(JSON.stringify(graphValues)),'#graph'+safeID(area.Area_Name)+' svg');
			});
		}
    
        //The Override Check
        $('#override_check'+safeID(area.Area_Name)).change(function()
        {
            if($(this).is(':checked'))
            {
                //set area to override = true
                $.getJSON(handler,{ControllerID: ControllerID, Area: $(this).attr('name'), Mode: 'SendAreaOverride', Val: 'True'}, function(returnVal){});
                //send close to actuator (default value)
                $.getJSON(handler,{ControllerID: ControllerID, Area: $(this).attr('name'), Mode: 'AreaActuatorOverride', Val:'Closed'}, function(returnVal){});
                
                //Drop down with listner
                $('#override'+safeID(area.Area_Name)).append('<div>Actuator Override <select name="'+$(this).attr('name')+'" id="moisture_override'+safeID(area.Area_Name)+'"><option value="Closed">Closed</option><option value="Opened">Opened</option></select></div>');
                $('#moisture_override'+safeID(area.Area_Name)).change(function()
                {
                    $.getJSON(handler,{ControllerID: ControllerID, Area: $(this).attr('name'), Mode: 'AreaActuatorOverride', Val: $('#moisture_override'+safeID(area.Area_Name)).val()}, function(returnVal){});
                });
            }
            else
            {
                //set area to override = false
                $.getJSON(handler,{ControllerID: ControllerID, Area: $(this).attr('name'), Mode: 'SendAreaOverride', Val: 'False'}, function(returnVal){});
                $('#override'+safeID(area.Area_Name)).empty();
            }
        });
			
		$('#RealTime').click();
    }
    
    function safeID(string)
    {
        return string.replace(/[!\"#$%&'\(\)\*\+,\.\/:;<=>\?\@\[\\\]\^`\{\|\}~\s]/g, '_');
    }

    function histChart(data,cont)
	{
		console.log(JSON.stringify(data));
		nv.addGraph(function() {
		  var chart = nv.models.lineChart()
				.forceY([0,1])
                .margin({left: 100, right: 100, bottom:100})
                .transitionDuration(500)
				.color(['red', 'blue'])
				.interpolate('linear');

		  chart.xAxis
			  .axisLabel('Time')
			  .rotateLabels(-45)
			  .tickFormat(function(d) { 
					return d3.time.format('%m/%d %I:%M %p')(new Date(d)) 
				});

		  chart.yAxis
			  .axisLabel('Value')
			  .tickFormat(d3.format(',.2%'));

		  d3.select(cont)
			  .datum(data)
			  .call(chart);

		  nv.utils.windowResize(chart.update);

		  return chart;
		});
	}
	
	
					
	
	/*
	$('#graph' + safeID(area.Area_Name)).empty();

	chart(currentMoistureList,area.Area_Name,[1, graphPoints - 2], "basis", function tick(path, line, data, x, cont, areaname, prevtime) 
	{
		
		//make it fit
		$(cont).children().attr("width", existingAreas.width());
		
		$.getJSON(handler,{ControllerID: ControllerID, Area: areaname, Mode: 'GetAreaData'}, chartTick(returnVal));
	
	});
	
    function chart(data, area, domain, interpolation, tick) {
    
        var margin, cont, x, y, line, svg, path;
        
        cont = '#graph' + safeID(area);
    
        margin = {top: 6,right: 0,bottom: 6,left: 40},
        width = $(cont).width() - margin.right,
        height = 400 - margin.top - margin.bottom;
    
        x = d3.scale.linear()
            .domain(domain)
            .range([0, width]);
    
        y = d3.scale.linear()
            .domain([0, 100])
            .range([height, 0]);
    
        line = d3.svg.line()
            .interpolate(interpolation)
            .x(function (d, i) {return x(i);})
            .y(function (d, i) {return y(d);});
    
        svg = d3.select(cont).append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
        svg.append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", width)
            .attr("height", height);
    
        svg.append("g")
            .attr("class", "y axis")
            .call(d3.svg.axis().scale(y).ticks(5).orient("left"));
    
        path = svg.append("g")
            .attr("clip-path", "url(#clip)")
            .append("path")
            .data([data])
            .attr("class", "line")
            .attr("d", line);
    
        tick(path, line, data, x, cont, area, 0);
    }
	function chartTick(returnVal)
	{

		//check if new data is different time from last
		if(returnVal.Time > prevtime)
		{
			//remove old stats
			//if($('#info'+safeID(areaname)).length)
			statsHolder.empty();

			//add data to the array
			data.push(returnVal.Areas[0].Current_Moisture.toFixed(2));
			moistureHolder = $('<div class="h3">');
			moistureHolder.append('<div class="col-md-3 col-md-offset-1 col-xs-9 col-xs-offset-3"> Current Moisture: ' + returnVal.Areas[0].Current_Moisture.toFixed(2) +'%</div>' );
			moistureHolder.append('<div class="col-md-3 col-md-offset-1 col-xs-9 col-xs-offset-3">Average Moisture: ' + returnVal.Areas[0].Moving_Average_Moisture.toFixed(2) +'%</div>' );
			moistureHolder.append('<div class="col-md-3 col-md-offset-1 col-xs-9 col-xs-offset-3">Actuator Status: ' + returnVal.Areas[0].Area_Actuator_Status + '</div>');
			statsHolder.append(moistureHolder);
		
			// redraw the line, and then slide it to the left 1 second delay
			path
			  .attr("d", line)
			  .attr("transform", null)
			.transition()
			  .duration(750)
			  .ease("linear")
			  .attr("transform", "translate(" + x(0) + ")")
			  .each("end", function() { tick(path, line, data, x, cont, areaname, returnVal.Time); });
			
			// pop the old data point off the front
			if(data.length>graphPoints)
				data.shift();
		}
		else
		{
			setTimeout(function(){tick(path, line, data, x, cont, areaname, returnVal.Time)},5000);
		}
	}*/
});
